#!/usr/bin/env ruby

require 'slop'
require 'bitballoon'
require 'highline/import'

opts = Slop.parse do
  on '-v', 'Print the version' do
    puts "Version #{BitBalloon::VERSION}"
  end

  command 'deploy' do
    on :a=, :'access-token=', 'API Access Token'
    on :s=, :'site-id=', 'BitBalloon site id'

    run do |opts, args|
      path = args.first ? File.expand_path(args.first) : Dir.getwd
      zip = path.match(/\.zip$/)

      raise "File or dir doesn't exist: #{path}" unless File.exist?(path)
      raise "Can't deploy a single file" if File.file?(path) && !zip

      credentials_path = opts[:a] ? nil : File.expand_path(".bitballoon")

      if credentials_path && File.exist?(credentials_path)
        credentials = JSON.parse(File.read(credentials_path))
        client = BitBalloon::Client.new(:access_token => credentials['access_token'])
      elsif opts[:a]
        credentials = {'access_token' => opts[:a]}
        client = BitBalloon::Client.new(:access_token => credentials['access_token'])
      else
        puts "Please enter your BitBalloon API Credentials (if you don't have any, you can create your credentials at https://www.bitballoon.com/applications)"
        client_id = ask("Client ID:")
        client_secret = ask("Client Secret:")
        site_url = ask("Site to deploy to (paste the URL - leave blank for new site):")
        client = BitBalloon::Client.new(:client_id => client_id, :client_secret => client_secret)
        client.authorize_from_credentials!
        site_match = site_url.match(/(https?:\/\/)?([^\/]+)/)
        credentials = {'access_token' => client.access_token, 'site_id' => site_match ? site_match[2] : nil}
      end

      credentials['site_id'] = opts[:s] if opts[:s]

      attributes = zip ? {:zip => path} : {:dir => path}

      puts "Deploying site"

      if credentials['site_id']
        site = client.sites.get(credentials['site_id'])
        site.update(attributes)
      else
        site = client.sites.create(attributes)
      end
      puts "Waiting for processing"
      site.wait_for_ready do |site|
        puts "Polling site: #{site.id} - #{site.state}"
      end

      credentials['site_id'] = site.id

      File.open(credentials_path, "w") do |file|
        file.write(JSON.generate(credentials))
      end if credentials_path

      puts "Site deployed: #{site.url}"
    end
  end
end